{"version":3,"sources":["context/formDataContext.js","components/login/login.component.jsx","components/custom.ticket-button/drop.down-menu/drop.down-component.jsx","components/custom.ticket-button/custom.ticket.component.jsx","components/select-ticket/select.ticket.component.jsx","components/navigation/nav.component.jsx","context/forms.context.js","components/ticket/ticket.component.jsx","components/select-gender/select-gender.component.jsx","components/custom.staff-input/staff-textInput.component.jsx","components/staff/staff.component.jsx","components/materialUI-card/card.component.jsx","components/dashboard/dashboard.component.jsx","components/settings/settings.component.jsx","App.js","serviceWorker.js","index.js"],"names":["FormDataContext","React","createContext","useFormData","context","useContext","Error","FormDataProvider","props","localData","localStorage","getItem","useState","JSON","parse","globalFormData","setGlobalFormData","history","useHistory","location","submitForm","formData","setItem","stringify","push","pathname","contextValue","useMemo","Provider","value","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","fname","lname","email","setFormData","error","setError","fNameErr","setfNameErrMsg","lNameErr","setlNameErrMsg","emailErr","setEmailErrMsg","password","setPassword","setPasswordErrMsg","validate","RegExp","test","validateEmail","handleChange","e","persist","target","name","classes","Container","component","maxWidth","CssBaseline","className","Avatar","noValidate","Grid","container","item","xs","sm","TextField","autoComplete","required","fullWidth","id","label","autoFocus","onChange","helperText","type","Button","onClick","preventDefault","length","justify","Box","mt","root","background","options","SimpleListMenu","option","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","handleMenuItemClick","index","List","aria-label","ListItem","button","aria-haspopup","aria-controls","event","currentTarget","ListItemText","primary","Menu","keepMounted","open","Boolean","onClose","map","MenuItem","key","disabled","selected","FormDialog","setTicketAddedOpen","setOpen","desc","setDesc","setOption","errorMsg","setErrorMsg","optionErrorMsg","setoptionErrorMsg","handleClose","startIcon","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","style","fontsize","DialogActions","formControl","minWidth","selectEmpty","SimpleSelect","data","handleStatusChange","FormControl","InputLabel","Select","labelId","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","withRouter","useTheme","itemsList","text","icon","AppBar","position","clsx","Toolbar","IconButton","edge","noWrap","Drawer","anchor","direction","Divider","ListItemIcon","FormsContext","FormsProvider","staffRows","setStaffRows","rows","setRows","children","Alert","elevation","snackbar","h1","console","log","checkTicketId","setCheckTicketId","ticketRows","setTicketRows","isRemount","setIsRemount","useEffect","openDialog","setOpenDialog","ticketAddedOpen","reason","handleTicketAddedClose","handleCloseDialog","ticketUpdateValue","setTicketUpdateValue","getTickets","ticketToUpdate","handleTicketDelete","TableContainer","Paper","Table","table","TableHead","TableRow","TableCell","TableBody","row","ticketID","scope","description","priority","lastUpdate","status","aria-describedby","filter","timeElapsed","now","toUTCString","shortid","generate","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","action","severity","BootstrapInput","withStyles","input","borderRadius","border","fontSize","fontFamily","join","borderColor","boxShadow","InputBase","divStyle","SelectGender","setGender","htmlFor","NativeSelect","genderData","setStaffSnackBarOpen","gender","firstName","setFirstname","lastName","setLastname","setEmail","contactNumber","setContactnumber","numberErr","setNumberErrMsg","flexWrap","textField","size","validateFirst","validateLast","validateNumbers","newStaffRows","setNewStaffRows","currentStaffId","setCurrentStaffId","handleStaffDelete","staffSnackBarOpen","paragraph","info","bullet","transform","title","pos","marginBottom","SimpleCard","Card","CardContent","gutterBottom","CardActions","breakpoints","up","ticketData","staffData","md","lg","to","textDecoration","Settings","header","loginData","lineHeight","UserCredentials","Styled","div","justifycontent","App","basename","path","exact","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1b11329c.chunk.js","sourcesContent":["import React, { useContext, useState, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n// created context here\nconst FormDataContext = React.createContext();\n\n// created a custom hook to help us use the context\nexport const useFormData = () => {\n  const context = useContext(FormDataContext);\n  if (!context) {\n    throw new Error(\"useFormData must be used with the FormData Provider\");\n  }\n  return context;\n};\n\n// defining the data store for values which gets returned on line 24\nexport const FormDataProvider = (props) => {\n  const localData = localStorage.getItem(\"data\");\n  const [globalFormData, setGlobalFormData] = useState(JSON.parse(localData));\n\n  \n  const history = useHistory();\n  const { location } = history;\n\n  const submitForm = (formData) => {\n    localStorage.setItem(\"data\", JSON.stringify(formData));\n    setGlobalFormData(() => ({ ...formData }));\n    history.push({\n      ...location,\n      pathname: \"/dashboard\",\n    });\n  };\n\n  const contextValue = useMemo(\n    () => ({ globalFormData, setGlobalFormData, submitForm }),\n    [globalFormData, setGlobalFormData]\n  );\n\n  return <FormDataContext.Provider value={contextValue} {...props} />;\n};\n","import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nimport { useFormData } from \"../../context/formDataContext\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Billy Atim\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  //value destructured from context API\n  const { submitForm } = useFormData();\n  //setting initial state\n  const [formData, setFormData] = useState({\n    fname: \"\",\n    lname: \"\",\n    email: \"\",\n  });\n  const [error, setError] = useState(false);\n\n  const [fNameErr, setfNameErrMsg] = useState(\"\");\n  const [lNameErr, setlNameErrMsg] = useState(\"\");\n  const [emailErr, setEmailErrMsg] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordErr, setPasswordErrMsg] = useState(\"\");\n\n  //validation values to test input fields against\n  const validate = new RegExp(/[A-Za-z]/).test(\n    formData.fname && formData.lname\n  );\n\n  const validateEmail = new RegExp(/\\S+@\\S+\\.\\S+/).test(formData.email);\n\n  const handleChange = (e) => {\n    e.persist();\n\n    setFormData((formData) => ({\n      ...formData,\n      password,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  // logic and submission of user forms when it has passed all validation checks\n  const onSubmit = (e) => {\n    setfNameErrMsg(\"\");\n    setlNameErrMsg(\"\");\n    setEmailErrMsg(\"\");\n    setPasswordErrMsg(\"\");\n    e.preventDefault();\n\n    if (\n      !formData.fname.length &&\n      !formData.lname.length &&\n      !formData.email.length > 0\n    ) {\n      setfNameErrMsg(\"Input fields cannot be empty\");\n      setlNameErrMsg(\"Input fields cannot be empty\");\n      setEmailErrMsg(\"Input fields cannot be empty\");\n\n      setError(true);\n      return;\n    }\n\n    if (!validate) {\n      setfNameErrMsg(\"Only letters permitted\");\n      setlNameErrMsg(\"Only letters permitted\");\n      setError(true);\n      return;\n    }\n\n    if (!validateEmail) {\n      setEmailErrMsg(\"Please enter a valid email address\");\n      setError(true);\n      return;\n    }\n    if (!password.length > 0) {\n      setPasswordErrMsg(\"Password is required\");\n      setError(true);\n      return;\n    }\n\n    submitForm(formData);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"fname\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                onChange={handleChange}\n                value={formData.fname}\n                error={error}\n                helperText={error && fNameErr}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lname\"\n                label=\"Last Name\"\n                name=\"lname\"\n                autoComplete=\"lname\"\n                onChange={handleChange}\n                value={formData.lname}\n                error={error}\n                helperText={error && lNameErr}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange={handleChange}\n                value={formData.email}\n                error={error}\n                helperText={error && emailErr}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                error={error}\n                helperText={error && \"Password is required\"}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            value=\"submit form\"\n            onClick={onSubmit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item></Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst options = [\"Please select one of the following:\", \"High\", \"Low\"];\n//destructured prop to be used in a function to retrieve the value\nexport default function SimpleListMenu({ option }) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  const handleClickListItem = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (value, index) => {\n    option(value);\n    setSelectedIndex(index);\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <List component=\"nav\" aria-label=\"Device settings\">\n        <ListItem\n          button\n          aria-haspopup=\"true\"\n          aria-controls=\"lock-menu\"\n          aria-label=\"Select Priority\"\n          onClick={handleClickListItem}\n        >\n          <ListItemText\n            required={true}\n            primary=\"Select Priority\"\n            secondary={options[selectedIndex]}\n            variant=\"outlined\"\n          />\n        </ListItem>\n      </List>\n      <Menu\n        id=\"lock-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {options.map((option, index) => (\n          <MenuItem\n            key={option}\n            disabled={index === 0}\n            selected={index === selectedIndex}\n            onClick={() => handleMenuItemClick(option, index)}\n          >\n            {option}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n","import React, { useState, Fragment } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SimpleMenu from \"./drop.down-menu/drop.down-component\";\n\nexport default function FormDialog({ formData, setTicketAddedOpen }) {\n  const [open, setOpen] = React.useState(false);\n  const [desc, setDesc] = React.useState(\"\");\n  const [option, setOption] = React.useState(\"\");\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [optionErrorMsg, setoptionErrorMsg] = useState(\"\");\n  // functions to open the dialog form\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //  call back function to retrieve the value of the option the user selects.\n  const optionHandler = (option) => {\n    setOption(option);\n  };\n\n  // logic for the description field\n  const handleSubmit = () => {\n    //Reset error\n    setError(false);\n    setErrorMsg(\"\");\n    setoptionErrorMsg(\"\");\n\n    const validate = new RegExp(/[A-Za-z]/).test(desc);\n\n    if (!desc.length > 0) {\n      setErrorMsg(\"Description field cannot be empty\");\n      setError(true);\n      return;\n    }\n    if (!validate) {\n      setErrorMsg(\"Only letters permitted\");\n      setError(true);\n      return;\n    }\n\n    if (!option) {\n      setoptionErrorMsg(\"Option field cannot be empty!\");\n      setError(true);\n      return;\n    }\n\n    //Submit data\n    formData({ desc, option });\n\n    //Reset the form inputs\n    setDesc(\"\");\n    setOption(\"\");\n\n    //Close Modal afetr submit\n    handleClose();\n    //set snackbar open\n    setTicketAddedOpen(true);\n  };\n\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleClickOpen}\n        startIcon={<AddIcon />}\n      >\n        Add ticket\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add ticket</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please enter in a description of the current issue you are facing\n            also remembering to select if it is 'High ' or 'Low' priority\n          </DialogContentText>\n          <TextField\n            required\n            error={error}\n            helperText={error && errorMsg}\n            name=\"description\"\n            variant=\"outlined\"\n            autoFocus\n            margin=\"dense\"\n            label=\"Description\"\n            type=\"text\"\n            onChange={(e) => setDesc(e.target.value)}\n            fullWidth\n          />\n          <SimpleMenu option={optionHandler} />\n          <p style={{ color: \"red\", fontsize: 12 }}>\n            {error && optionErrorMsg}\n          </p>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n   </Fragment>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n// desctructing props to use in function to retrieve value\nexport default function SimpleSelect({data, handleStatusChange}) {\n  const classes = useStyles();\n \n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\"></InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={data.value}\n          onChange={(e)=>handleStatusChange(e, data.index)}\n        >\n          <MenuItem value={\"Pending\"}>Pending</MenuItem>\n          <MenuItem value={\"Completed\"}>Completed</MenuItem>\n        </Select>\n      </FormControl>\n    </div>\n  );\n  }\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport BugReportIcon from \"@material-ui/icons/BugReport\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nfunction Nav(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  // Higher order component used to allow me to route between pages\n  const { history } = props;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  //custom data structure to allow me to easily map through items and destructure them in the below function.\n  const itemsList = [\n    {\n      text: \"Dashboard\",\n      icon: <DashboardIcon />,\n      onClick: () => history.push(\"/dashboard\"),\n    },\n    {\n      text: \"Tickets\",\n      icon: <BugReportIcon />,\n      onClick: () => history.push(\"/ticket\"),\n    },\n    {\n      text: \"Staff\",\n      icon: <PeopleIcon />,\n      onClick: () => history.push(\"/staff\"),\n    },\n    {\n      text: \"Settings\",\n      icon: <SettingsIcon />,\n      onClick: () => history.push(\"/settings\"),\n    },\n    {\n      text: \"Log out\",\n      icon: <ExitToAppIcon />,\n      onClick: () => history.push(\"/\"),\n    },\n  ];\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Administrator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {itemsList.map((item, index) => {\n            const { text, icon, onClick } = item;\n\n            //if the icon is not undefined then display what is after the &&\n            return (\n              <ListItem button key={text} onClick={onClick}>\n                {icon && <ListItemIcon>{icon}</ListItemIcon>}\n                <ListItemText primary={text} />\n              </ListItem>\n            );\n          })}\n        </List>\n        <Divider />\n\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n        </main>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default withRouter(Nav);\n","import React, { useState, createContext } from \"react\";\n\nexport const FormsContext = createContext();\n\nexport const FormsProvider = (props) => {\n  // hook for staff data\n  let newRow = [];\n  const [staffRows, setStaffRows] = useState(newRow);\n\n  //hook for ticket data\n  let row = [];\n  const [rows, setRows] = useState(row);\n\n  return (\n    <FormsContext.Provider\n      value={{ staffRows: [staffRows, setStaffRows], rows: [rows, setRows] }}\n    >\n      {props.children}\n    </FormsContext.Provider>\n  );\n};\n\n","import React from \"react\";\nimport { useEffect, useContext, useState, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport shortid from \"shortid\";\n//imports for table\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport FormDialog from \"../custom.ticket-button/custom.ticket.component\";\nimport TicketSelect from \"../select-ticket/select.ticket.component\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Navigation from \"../navigation/nav.component\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\n// context api\nimport { FormsContext } from \"../../context/forms.context\";\n\n//icon imports\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Grid } from \"@material-ui/core\";\n// Dialog imports\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  snackbar: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  h1: {\n    marginTop: \"80px\",\n  },\n}));\n\nfunction Ticket(props) {\n  const classes = useStyles();\n\n  console.log(props);\n\n  const { rows } = useContext(FormsContext);\n  //global state variable for ID of ticket if user deletes it.\n  const [checkTicketId, setCheckTicketId] = useState(null);\n\n  // destructured items from context API\n  const [ticketRows, setTicketRows] = rows;\n\n  // mount varibale to confirm if component has remounted when staus is changed by user\n  const [isRemount, setIsRemount] = React.useState(false);\n\n  // data structure defined for when data is inserted into table, call back values are also destructured here and inserted to the data structure\n  const formDataHandler = ({ desc, option }) => {\n    const timeElapsed = Date.now();\n    const now = new Date(timeElapsed);\n\n    const date = now.toUTCString();\n\n    const data = {\n      description: desc,\n      priority: option,\n      status: \"Pending\",\n      lastUpdate: date,\n      ticketID: shortid.generate(),\n    };\n    // updating the ticket rows value with what is contained within the data object\n    setTicketRows([...ticketRows, data]);\n    console.log(ticketRows);\n  };\n\n  // hook to parse data\n  useEffect(() => {\n    const data = localStorage.getItem(\"ticket-list\");\n    if (data) {\n      setTicketRows(JSON.parse(data));\n    }\n  }, [isRemount, setTicketRows]);\n\n  //effect hook to save information on browser\n  useEffect(() => {\n    localStorage.setItem(\"ticket-list\", JSON.stringify(ticketRows));\n  });\n\n  // snackbar state\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const [ticketAddedOpen, setTicketAddedOpen] = useState(false);\n\n  //snackbar open/ close\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const handleTicketAddedClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setTicketAddedOpen(false);\n  };\n\n  //dialog state and functions to open and close it\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  //state for updated ticket value\n  const [ticketUpdateValue, setTicketUpdateValue] = useState(\"\");\n\n  // function to only update ticket value if the value of ticketUpdateValue\n  useEffect(() => {\n    if (ticketUpdateValue !== \"\") {\n      setOpen(true);\n    }\n  }, [ticketUpdateValue]);\n\n  const handleStatusChange = (event, index) => {\n    let getTickets = localStorage.getItem(\"ticket-list\");\n    if (getTickets) {\n      getTickets = JSON.parse(getTickets);\n      let ticketToUpdate = getTickets[index];\n      if (ticketToUpdate) ticketToUpdate[\"status\"] = event.target.value;\n\n      localStorage.setItem(\"ticket-list\", JSON.stringify([...getTickets]));\n\n      setTicketUpdateValue(event.target.value);\n\n      setIsRemount(!isRemount);\n    }\n  };\n\n  // function to remove ticket on click\n  const handleTicketDelete = (id) => {\n    handleClickOpen();\n    console.log(\"what?\");\n    setCheckTicketId(id);\n  };\n\n  const deleteTicket = (ticketID) => {\n    if (!ticketID) return;\n    handleCloseDialog();\n    setTicketRows(ticketRows.filter((item) => ticketID !== item.ticketID));\n    setCheckTicketId(null);\n  };\n\n  return (\n    \n    <div className={classes.root}>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Navigation />\n\n        <Typography variant=\"h4\" className={classes.h1}>\n          Click 'add ticket' to log a new ticket to the table\n        </Typography>\n        <Grid>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Priority</TableCell>\n                  <TableCell>Last update</TableCell>\n                  <TableCell>Ticket ID</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Delete Ticket</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {ticketRows.length > 0\n                  ? ticketRows.map((row, index) => (\n                      <TableRow key={row.ticketID}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {row.description}\n                        </TableCell>\n                        <TableCell>{row.priority}</TableCell>\n                        <TableCell>{row.lastUpdate}</TableCell>\n                        <TableCell>{row.ticketID}</TableCell>\n                        <TableCell>\n                          {\" \"}\n                          <TicketSelect\n                            data={{ index: index, value: row.status }}\n                            handleStatusChange={handleStatusChange}\n                          />\n                        </TableCell>\n\n                        <TableCell>\n                          <IconButton\n                            onClick={() => handleTicketDelete(row.ticketID)}\n                            aria-label=\"delete\"\n                            color=\"primary\"\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  : null}\n                <Dialog\n                  open={openDialog}\n                  onClose={handleCloseDialog}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <DialogTitle id=\"alert-dialog-title\">\n                    {\"Delete Ticket?\"}\n                  </DialogTitle>\n                  <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                      Warning! by clicking 'yes' the data will be deleted and\n                      cannot be retrieved.\n                    </DialogContentText>\n                  </DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleCloseDialog} color=\"primary\">\n                      No\n                    </Button>\n                    <Button\n                      onClick={() => deleteTicket(checkTicketId)}\n                      color=\"primary\"\n                      autoFocus\n                    >\n                      Yes\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n                <FormDialog\n                  formData={formDataHandler}\n                  setTicketAddedOpen={setTicketAddedOpen}\n                />\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </main>\n\n      <div>\n        <Snackbar\n          className={classes.root}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"center\",\n          }}\n          open={open}\n          autoHideDuration={2000}\n          onClose={handleClose}\n          action={\n            <Fragment>\n              <IconButton onClick={handleClose}></IconButton>\n            </Fragment>\n          }\n        >\n          <Alert onClose={handleClose} severity=\"warning\">\n            {`Status has been changed to ${ticketUpdateValue}`}\n          </Alert>\n        </Snackbar>\n       \n        <div>\n          <Snackbar\n            className={classes.root}\n            open={ticketAddedOpen}\n            autoHideDuration={2000}\n            anchorOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\",\n            }}\n            onClose={handleTicketAddedClose}\n            action={\n              <Fragment>\n                <IconButton onClick={handleTicketAddedClose}></IconButton>\n              </Fragment>\n            }\n          >\n            <Alert onClose={handleTicketAddedClose} severity=\"success\">\n              New staff member successfully added!\n            </Alert>\n          </Snackbar>\n          \n        </div>\n      </div>\n    </div>\n  );\n}\nexport default withRouter(Ticket);\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport InputBase from \"@material-ui/core/InputBase\";\n\nconst BootstrapInput = withStyles((theme) => ({\n  root: {\n    \"label + &\": {\n      marginTop: theme.spacing(3),\n    },\n  },\n  input: {\n    borderRadius: 4,\n    position: \"relative\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #ced4da\",\n    fontSize: 16,\n    padding: \"10px 26px 10px 12px\",\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    \"&:focus\": {\n      borderRadius: 4,\n      borderColor: \"#80bdff\",\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\n    },\n  },\n}))(InputBase);\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  divStyle: {\n    display: \"initial\",\n  },\n}));\n// destructuring prop to be used within the function to retrieve the value\nexport default function SelectGender({ setGender }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.divStyle}>\n      <FormControl className={classes.margin}></FormControl>\n\n      <FormControl className={classes.margin}>\n        <InputLabel htmlFor=\"demo-customized-select-native\">Gender</InputLabel>\n        <NativeSelect\n          id=\"demo-customized-select-native\"\n          onChange={(e) => setGender(e.target.value)}\n          input={<BootstrapInput />}\n        >\n          <option aria-label=\"Gender\" value=\"label\" />\n          <option value={\"Male\"}>Male</option>\n          <option value={\"Female\"}>Female</option>\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport SelectGender from \"../select-gender/select-gender.component\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function FormDialog({ genderData, setStaffSnackBarOpen }) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [gender, setGender] = React.useState(\"\");\n  const [firstName, setFirstname] = React.useState(\"\");\n  const [lastName, setLastname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [contactNumber, setContactnumber] = React.useState(\"\");\n\n  const [error, setError] = useState(false);\n  const [optionErrorMsg, setoptionErrorMsg] = useState(\"\");\n\n  const [fNameErr, setfNameErrMsg] = useState(\"\");\n  const [lNameErr, setlNameErrMsg] = useState(\"\");\n  const [numberErr, setNumberErrMsg] = useState(\"\");\n  const [emailErr, setEmailErrMsg] = useState(\"\");\n\n  // logic and validation for input fields/ setting snackbar to display when all data is submitted.\n  const handleSubmit = () => {\n    //Reset error\n    setError(false);\n    setoptionErrorMsg(\"\");\n\n    setfNameErrMsg(\"\");\n    setlNameErrMsg(\"\");\n    setNumberErrMsg(\"\");\n    setEmailErrMsg(\"\");\n\n    const validateFirst = new RegExp(/[A-Za-z]/).test(firstName);\n\n    const validateLast = new RegExp(/[A-Za-z]/).test(lastName);\n\n    const validateNumbers = new RegExp(/^[0-9]+$/).test(contactNumber);\n\n    const validateEmail = new RegExp(/\\S+@\\S+\\.\\S+/).test(email);\n\n    if (\n      !firstName.length &&\n      !lastName.length &&\n      !email.length &&\n      !contactNumber > 0\n    ) {\n      setfNameErrMsg(\"Input fields cannot be empty\");\n      setlNameErrMsg(\"Input fields cannot be empty\");\n      setNumberErrMsg(\"Input fields cannot be empty\");\n      setEmailErrMsg(\"Input fields cannot be empty\");\n      setError(true);\n      return;\n    }\n\n    if (!validateFirst) {\n      setfNameErrMsg(\"Only letters permitted\");\n      setError(true);\n      return;\n    }\n\n    if (!validateLast) {\n      setlNameErrMsg(\"Only letters permitted\");\n      setError(true);\n      return;\n    }\n\n    if (!validateNumbers) {\n      setNumberErrMsg(\"Only numbers permitted\");\n      setError(true);\n      return;\n    }\n\n    if (!gender) {\n      setoptionErrorMsg(\"Option field cannot be empty!\");\n      setError(true);\n      return;\n    }\n\n    if (!validateEmail) {\n      setEmailErrMsg(\"Please enter a valid email address\");\n      setError(true);\n      return;\n    }\n\n    //Submit data\n    genderData({ gender, firstName, lastName, email, contactNumber });\n\n    //Reset the form inputs\n    setFirstname(\"\");\n    setLastname(\"\");\n    setGender(\"\");\n    setContactnumber(\"\");\n    setEmail(\"\");\n\n    handleClose();\n\n    setStaffSnackBarOpen(true);\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: \"25ch\",\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\n        Add new staff member\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add new staff member</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please fill out all fields to add a new member of staff\n          </DialogContentText>\n          <TextField\n            required\n            error={error}\n            helperText={error && fNameErr}\n            autoFocus\n            onChange={(e) => setFirstname(e.target.value)}\n            margin=\"dense\"\n            name=\"firstName\"\n            label=\"First Name\"\n            type=\"text\"\n            size=\"medium\"\n            value={firstName}\n          />\n\n          <TextField\n            required\n            error={error}\n            helperText={error && lNameErr}\n            style={{ margin: 9 }}\n            autoFocus\n            onChange={(e) => setLastname(e.target.value)}\n            margin=\"dense\"\n            name=\"lastName\"\n            label=\"Last name\"\n            type=\"text\"\n            size=\"medium\"\n            value={lastName}\n          />\n          <br></br>\n          <TextField\n            autoFocus\n            required\n            error={error}\n            helperText={error && emailErr}\n            margin=\"dense\"\n            onChange={(e) => setEmail(e.target.value)}\n            name=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            size=\"medium\"\n            value={email}\n          />\n          <SelectGender\n            gender={gender}\n            setGender={setGender}\n            onChange={(e) => setGender(e.target.value)}\n            required\n            error={error}\n            helperText={error && optionErrorMsg}\n          />\n          <p style={{ color: \"red\", fontsize: 12 }}>\n            {error && optionErrorMsg}\n          </p>\n          <br></br>\n          <TextField\n            autoFocus\n            onChange={(e) => setContactnumber(e.target.value)}\n            margin=\"dense\"\n            name=\"contactNumber\"\n            label=\"Contact number\"\n            size=\"medium\"\n            value={contactNumber}\n            required\n            error={error}\n            helperText={error && numberErr}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useEffect, useContext, useState, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport shortid from \"shortid\";\n//imports for table\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StaffTextFields from \"../custom.staff-input/staff-textInput.component\";\nimport Navigation from \"../navigation/nav.component\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n//icon imports\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n// dialog imports\nimport { FormsContext } from \"../../context/forms.context\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  snackbar: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  h1: {\n    marginTop: \"60px\",\n  },\n}));\n\nfunction Staff(props) {\n  const classes = useStyles();\n\n  console.log(props);\n\n  const { staffRows } = useContext(FormsContext);\n  const [newStaffRows, setNewStaffRows] = staffRows;\n\n  //dialog\n  const [open, setOpen] = useState(false);\n  const [currentStaffId, setCurrentStaffId] = useState(null);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n  };\n\n  //delete staff call back function is invoked to allow us to access the id value which is defined within the map function on within the table\n  const handleStaffDelete = (id) => {\n    handleClickOpen();\n    setCurrentStaffId(id);\n  };\n\n  // this function is called to iterate through the specific ID of the item row within the table first cheking the ID is present before deleting to specific row then returnong the state back to null preventing the button from being clicked twice\n  const deleteStaff = (id) => {\n    if (!id) return;\n    handleCloseDialog();\n    setNewStaffRows(newStaffRows.filter((item) => id !== item.id));\n    setCurrentStaffId(null);\n  };\n\n  //effect hook to save information on browser\n  useEffect(() => {\n    const data = localStorage.getItem(\"staff-list\");\n    if (data) {\n      setNewStaffRows(JSON.parse(data));\n    }\n  }, [setNewStaffRows]);\n\n  useEffect(() => {\n    localStorage.setItem(\"staff-list\", JSON.stringify(newStaffRows));\n  });\n\n  //alert state\n\n  const [staffSnackBarOpen, setStaffSnackBarOpen] = useState(false);\n\n  // stackbar open and close functions\n  const handleStaffAddedClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setStaffSnackBarOpen(false);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setStaffSnackBarOpen(false);\n  };\n  // data structure defined for when data is inserted into table, call back values are also destructured here and inserted to the data structure\n\n  const genderData = ({\n    gender,\n    firstName,\n    lastName,\n    email,\n    contactNumber,\n  }) => {\n    const info = {\n      id: shortid.generate(),\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      gender: gender,\n      contactNumber: contactNumber,\n    };\n\n    setNewStaffRows([...newStaffRows, info]);\n    console.log(newStaffRows);\n  };\n\n  return (\n    <div className={classes.root}>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Navigation />\n        <Typography paragraph variant=\"h4\" className={classes.h1}>\n          Click 'add staff' to log a new staff member to the table\n        </Typography>\n        <Grid>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>First Name</TableCell>\n                  <TableCell>Last Name</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>Gender</TableCell>\n                  <TableCell>Contact number</TableCell>\n                  <TableCell>Delete staff member</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {newStaffRows.length > 0\n                  ? newStaffRows.map((row) => (\n                      <TableRow key={row.id}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {row.firstName}\n                        </TableCell>\n                        <TableCell>{row.lastName}</TableCell>\n                        <TableCell>{row.email}</TableCell>\n                        <TableCell>{row.gender}</TableCell>\n                        <TableCell>{row.contactNumber}</TableCell>\n\n                        <TableCell>\n                          <IconButton\n                            onClick={() => handleStaffDelete(row.id)}\n                            aria-label=\"delete\"\n                            color=\"primary\"\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  : null}\n                <Dialog\n                  open={open}\n                  onClose={handleCloseDialog}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <DialogTitle id=\"alert-dialog-title\">\n                    {\"Delete Staff member?\"}\n                  </DialogTitle>\n                  <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                      Warning! by clicking 'yes' the data will be deleted and\n                      cannot be retrieved.\n                    </DialogContentText>\n                  </DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleCloseDialog} color=\"primary\">\n                      No\n                    </Button>\n                    <Button\n                      onClick={() => deleteStaff(currentStaffId)}\n                      color=\"primary\"\n                      autoFocus\n                    >\n                      Yes\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n\n                <StaffTextFields\n                  genderData={genderData}\n                  setStaffSnackBarOpen={setStaffSnackBarOpen}\n                />\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </main>\n      <div className={classes.root}>\n        <Snackbar\n          open={staffSnackBarOpen}\n          autoHideDuration={2000}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"center\",\n          }}\n          onClose={handleClose}\n          action={\n            <Fragment>\n              <IconButton onClick={handleStaffAddedClose}></IconButton>\n            </Fragment>\n          }\n        >\n          <Alert onClose={handleClose} severity=\"success\">\n            New staff member successfully added!\n          </Alert>\n        </Snackbar>\n      </div>\n    </div>\n  );\n}\nexport default withRouter(Staff);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  icon: {\n    display: \"flex\",\n  },\n});\n\n//props destructured and displayed within the card elements\nexport default function SimpleCard({ data, title, icon }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {title}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {icon}\n          <br></br>\n          {data.length}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\"></Typography>\n        <Typography variant=\"body2\" component=\"p\"></Typography>\n      </CardContent>\n      <CardActions></CardActions>\n    </Card>\n  );\n}\n","import React, { useContext, useEffect } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n//icon imports\nimport BugReportIcon from \"@material-ui/icons/BugReport\";\nimport PeopleIcon from \"@material-ui/icons/People\";\n\n//components\nimport SimpleCard from \"../materialUI-card/card.component\";\nimport Navigation from \"../navigation/nav.component\";\n// context API \nimport { FormsContext } from \"../../context/forms.context\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  h1: {\n    marginTop: \"50px\",\n  },\n}));\n\nexport const Dashboard = (props) => {\n  const classes = useStyles();\n\n  const { staffRows, rows } = useContext(FormsContext);\n  const [newStaffRows, setNewStaffRows] = staffRows;\n  const [ticketRows, setTicketRows] = rows;\n\n  // hook to parse data\n\n  useEffect(() => {\n    const ticketData = localStorage.getItem(\"ticket-list\");\n    if (ticketData) {\n      setTicketRows(JSON.parse(ticketData));\n    }\n    const staffData = localStorage.getItem(\"staff-list\");\n    if (staffData) {\n      setNewStaffRows(JSON.parse(staffData));\n    }\n  }, [setNewStaffRows, setTicketRows]);\n\n  return (\n    <div className={classes.root}>\n      <main className={classes.content}>\n        <Navigation />\n\n        <Grid container spacing={2} justify=\"center\">\n          <Grid item xs={8} sm={8} md={12} lg={12}>\n            <Typography variant=\"h5\" className={classes.h1}>\n              Outstanding task(s)\n            </Typography>\n          </Grid>\n\n          <Grid item xs={12} sm={8} md={6} lg={5}>\n            <Link to={\"/ticket\"} style={{ textDecoration: \"none\" }}>\n              <SimpleCard\n                icon={<BugReportIcon />}\n                data={ticketRows}\n                title=\"Ticket(s)\"\n              />\n            </Link>\n          </Grid>\n\n          <Grid item xs={12} sm={8} md={6} lg={5}>\n            <Link to={\"/staff\"} style={{ textDecoration: \"none\" }}>\n              <SimpleCard\n                icon={<PeopleIcon />}\n                data={newStaffRows}\n                title=\"Staff\"\n              />\n            </Link>\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n};\nexport default withRouter(Dashboard);\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Styled from \"styled-components\";\nimport { useFormData } from \"../../context/formDataContext\";\n\n// icon import\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n//component\nimport Navigation from \"../navigation/nav.component\";\n\nexport const Settings = () => {\n  const { globalFormData } = useFormData();\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\",\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"none\",\n      },\n    },\n\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    header: {\n      padding: \"100px\",\n    },\n    icon: {\n      fontSize: \"80px\",\n    },\n    loginData: {\n      lineHeight: \"2.5\",\n    },\n  }));\n\n  const classes = useStyles();\n  const UserCredentials = Styled.div`\ndisplay: flex;\n\njustify-content: flex-end;\n\nmargin-top: 100px;\n\n`;\n\n  return (\n    <div className={classes.root}>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Navigation />\n        <Grid container spacing={1}>\n          <Grid\n            container\n            direction=\"column\"\n            justifycontent=\"center\"\n            alignItems=\"center\"\n          >\n            <UserCredentials>\n              <SettingsIcon className={classes.icon} />\n              <Typography className={classes.loginData}>\n                Settings version 1.0\n                <br />\n                Current user logged in {globalFormData.fname}{\" \"}\n                {globalFormData.lname}\n                <br />\n                Email: {globalFormData.email}\n              </Typography>\n            </UserCredentials>\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { HashRouter,  Switch, Route} from \"react-router-dom\";\nimport Login from \"./components/login/login.component\";\nimport Ticket from './components/ticket/ticket.component';\n\nimport Staff from './components/staff/staff.component.jsx'\nimport  Dashboard from \"./components/dashboard/dashboard.component\";\nimport \"./App.css\";\n\nimport {FormsProvider} from './context/forms.context'\nimport { FormDataProvider } from \"./context/formDataContext\";\nimport { Settings } from \"./components/settings/settings.component\";\n\nfunction App() {\n\n\n\n  return (\n    \n    <HashRouter basename=\"/\">\n\n      <Switch>\n        <FormDataProvider>\n          <FormsProvider>\n            <Route path=\"/staff\">\n              <Staff />\n            </Route>\n            <Route path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n            <Route path=\"/ticket\">\n              <Ticket />\n            </Route>\n\n            <Route path=\"/settings\">\n              <Settings />\n            </Route>\n\n            <Route path=\"/\" exact>\n              <Login />\n            </Route>\n          </FormsProvider>\n        </FormDataProvider>\n      </Switch>\n   </HashRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router} from \"react-router-dom\";\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}